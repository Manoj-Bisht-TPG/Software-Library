<?xml version="1.0"?>
<configuration>
  <configSections>
    <section name="default" type="System.Configuration.DictionarySectionHandler,System,Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"/>
    <section name="unity" type="Microsoft.Practices.Unity.Configuration.UnityConfigurationSection,Microsoft.Practices.Unity.Configuration"/>
    <section name="log4net" type="log4net.Config.Log4NetConfigurationSectionHandler, log4net"/>
  </configSections>
  <appSettings>
    <!--Enable/Disable log4nwt debugging -->
    <add key="log4net.Internal.Debug" value="true"/>
  </appSettings>
  <!--Enable / Disable Log4net internal error log-->
  <system.diagnostics>
    <trace autoflush="true">
      <listeners>
        <add name="textWriterTraceListener" type="System.Diagnostics.TextWriterTraceListener" initializeData="C:\CCLogs\Client\Distributed\Debug\log4net.txt"/>
      </listeners>
    </trace>
  </system.diagnostics>
  <!--Log4net - Configuration-->
  <log4net debug="True">
    <!--Log4net - File Logger configuration-->
    <appender name="ADONetAppender" type="log4net.Appender.ADONetAppender">
      <bufferSize value="100" />
      <connectionType value="System.Data.SqlClient.SqlConnection, System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
      <connectionString value="server=NDI-LAP-215\MSSQLSERVER2008; uid=sa; pwd=Brick@123; database=AustData" />
      <commandText value="INSERT INTO ACPLog ([Thread],[Level],[Logger],[Message],[LogDate],[Exception],[HostName],[ApplicationName]) VALUES (@thread, @log_level, @logger,@message,@logDate,@exception,@hostName,@applicationName)" />
      <parameter>
        <parameterName value="@thread"/>
        <dbType value="String"/>
        <size value="50"/>
        <layout type="log4net.Layout.PatternLayout">
          <conversionPattern value="%thread"/>
        </layout>
      </parameter>
      <parameter>
        <parameterName value="@log_level"/>
        <dbType value="String"/>
        <size value="50"/>
        <layout type="log4net.Layout.PatternLayout">
          <conversionPattern value="%level"/>
        </layout>
      </parameter>
      <parameter>
        <parameterName value="@logger"/>
        <dbType value="String"/>
        <size value="50"/>
        <layout type="log4net.Layout.PatternLayout">
          <conversionPattern value="%logger"/>
        </layout>
      </parameter>
      <parameter>
        <parameterName value="@message"/>
        <dbType value="String"/>
        <size value="50"/>
        <layout type="log4net.Layout.PatternLayout">
          <conversionPattern value="%message"/>
        </layout>
      </parameter>
      <parameter>
        <parameterName value="@log_date" />
        <dbType value="DateTime" />
        <layout type="log4net.Layout.RawTimeStampLayout" />
      </parameter>
      <parameter>
        <parameterName value="@exception"/>
        <dbType value="String"/>
        <size value="2000"/>
        <layout type="log4net.Layout.PatternLayout">
          <conversionPattern value="%message"/>
        </layout>
      </parameter>

      <parameter>
        <parameterName value="@hostName"/>
        <dbType value="String"/>
        <size value="100"/>
        <layout type="log4net.Layout.PatternLayout">
          <conversionPattern value="%hostName"/>
        </layout>
      </parameter>

      <parameter>
        <parameterName value="@applicationName"/>
        <dbType value="String"/>
        <size value="100"/>
        <layout type="log4net.Layout.PatternLayout">
          <conversionPattern value="%applicationName"/>
        </layout>
      </parameter>

    </appender>
    <logger name="ADONetAppender">
      <appender-ref ref="ADONetAppender"/>
    </logger>
  </log4net>

  <unity>
    <typeAliases>
      <!--Lifetime manager types-->
      <typeAlias alias="singleton" type="Microsoft.Practices.Unity.ContainerControlledLifetimeManager,Microsoft.Practices.Unity"/>
      <typeAlias alias="external" type="Microsoft.Practices.Unity.ExternallyControlledLifetimeManager,Microsoft.Practices.Unity"/>
      <!--Custom object types-->
      <typeAlias alias="ILogger" type="TPG.SoftwareFactory.Contract.ILogger, TPG.SoftwareFactory.Contract"/>
      <typeAlias alias="Log4NetLogger" type="TPG.SoftwareFactory.Log4Net.Log4NetLogger, TPG.SoftwareFactory.Log4Net"/>
      <typeAlias alias="ServiceLogger" type="TPG.SoftwareFactory.Service.ServiceLogger, TPG.SoftwareFactory.Service"/>
      <!--<typeAlias alias="EnterpriseLogger" type="TPG.SoftwareFactory.EnterpriseLibrary.EnterpriseLogger, TPG.SoftwareFactory.EnterpriseLibrary"/>-->
    </typeAliases>
    <containers>
      <container name="LoggerContainer">
        <types>
          <type type="ILogger" mapTo="ServiceLogger">
            <lifetime type="singleton"/>
          </type>
        </types>
      </container>
    </containers>
  </unity>

  <startup>
    <supportedRuntime version="v4.0" sku=".NETFramework,Version=v4.0"/>
  </startup>
  
  <runtime>
    <assemblyBinding xmlns="urn:schemas-microsoft-com:asm.v1">
      <dependentAssembly>
        <assemblyIdentity name="Microsoft.Practices.Unity" publicKeyToken="31BF3856AD364E35" culture="neutral"/>
        <bindingRedirect oldVersion="0.0.0.0-2.1.14.0" newVersion="2.1.505.0"/>
      </dependentAssembly>
      <dependentAssembly>
        <assemblyIdentity name="Microsoft.Practices.Unity.Interception" publicKeyToken="31BF3856AD364E35" culture="neutral"/>
        <bindingRedirect oldVersion="0.0.0.0-2.1.505.0" newVersion="2.1.505.0"/>
      </dependentAssembly>
    </assemblyBinding>
  </runtime>

  <system.serviceModel>
    <bindings>
      <basicHttpBinding>
        <binding name="BasicHttpBinding_ILogger"/>
      </basicHttpBinding>
    </bindings>
    <client>
      <endpoint address="http://localhost:50980/LoggerServices.svc" binding="basicHttpBinding" bindingConfiguration="BasicHttpBinding_ILogger" contract="LoggerServiceRef.ILogger" name="BasicHttpBinding_ILogger"/>
    </client>
  </system.serviceModel>
</configuration>
